summary(TowNumber)
summary(SamplingDirection)
summary(TowDuration)
summary(FlowDebris)
summary(SiteDisturbance)
summary(AlternateSite)
summary(SeineLength)
summary(SeineWidth)
summary(SeineDepth)
summary(FlowmeterStart)
summary(FlowmeterEnd)
summary(FlowmeterDifference)
summary(Volume)
summary(OrganismCode)
summary(IEPFishCode)
summary(CommonName)
summary(MarkCode)
summary(StageCode)
summary(Expression)
summary(ForkLength)
summary(RaceByLength)
summary(TagCode)
summary(RaceByTag)
summary(ArchivalID)
summary(SpecialStudyID)
summary(GeneticID)
summary(Probability1)
summary(GeneticID2)
summary(Probability2)
summary(SexGeneID)
summary(Ots28)
summary(Lab)
summary(GeneticTest)
summary(GeneticModel)
summary(Count)
# Get more details on character variables
summary(as.factor(dt1$Location))
summary(as.factor(dt1$RegionCode))
summary(as.factor(dt1$StationCode))
summary(as.factor(dt1$MethodCode))
summary(as.factor(dt1$GearConditionCode))
summary(as.factor(dt1$WeatherCode))
summary(as.factor(dt1$SamplingDirection))
summary(as.factor(dt1$FlowDebris))
summary(as.factor(dt1$SiteDisturbance))
summary(as.factor(dt1$AlternateSite))
summary(as.factor(dt1$OrganismCode))
summary(as.factor(dt1$IEPFishCode))
summary(as.factor(dt1$CommonName))
summary(as.factor(dt1$MarkCode))
summary(as.factor(dt1$StageCode))
summary(as.factor(dt1$Expression))
summary(as.factor(dt1$RaceByLength))
summary(as.factor(dt1$TagCode))
summary(as.factor(dt1$RaceByTag))
summary(as.factor(dt1$ArchivalID))
summary(as.factor(dt1$SpecialStudyID))
summary(as.factor(dt1$GeneticID))
summary(as.factor(dt1$GeneticID2))
summary(as.factor(dt1$SexGeneID))
summary(as.factor(dt1$Ots28))
summary(as.factor(dt1$Lab))
summary(as.factor(dt1$GeneticTest))
summary(as.factor(dt1$GeneticModel))
detach(dt1)
#######
# dt2 #
#######
# file from "https://pasta.lternet.edu/package/data/eml/edi/244/9/4cf98db173a16731bcbb2d37ad656538"
dt2 <-read.csv("2002-2021_DJFMP_trawl_fish_and_water_quality_data.csv",header=F
,skip=1
,sep=","
,quot='"'
, col.names=c(
"Location",
"RegionCode",
"StationCode",
"SampleDate",
"SampleTime",
"MethodCode",
"GearConditionCode",
"WeatherCode",
"DO",
"WaterTemp",
"Turbidity",
"Secchi",
"SpecificConductance",
"TowNumber",
"SamplingDirection",
"TowDuration",
"FlowDebris",
"SiteDisturbance",
"AlternateSite",
"SeineLength",
"SeineWidth",
"SeineDepth",
"FlowmeterStart",
"FlowmeterEnd",
"FlowmeterDifference",
"Volume",
"OrganismCode",
"IEPFishCode",
"CommonName",
"MarkCode",
"StageCode",
"Expression",
"ForkLength",
"RaceByLength",
"TagCode",
"RaceByTag",
"ArchivalID",
"SpecialStudyID",
"GeneticID",
"Probability1",
"GeneticID2",
"Probability2",
"SexGeneID",
"Ots28",
"Lab",
"GeneticTest",
"GeneticModel",
"Count"    ), check.names=TRUE)
# Fix any interval or ratio columns mistakenly read in as nominal and nominal columns read as numeric or dates read as strings
if (class(dt2$Location)!="factor") dt2$Location<- as.factor(dt2$Location)
if (class(dt2$RegionCode)!="factor") dt2$RegionCode<- as.factor(dt2$RegionCode)
if (class(dt2$StationCode)!="factor") dt2$StationCode<- as.factor(dt2$StationCode)
# attempting to convert dt2$SampleDate dateTime string to R date structure (date or POSIXct)
tmpDateFormat<-"%Y-%m-%d"
tmp2SampleDate<-as.Date(dt2$SampleDate,format=tmpDateFormat)
# Keep the new dates only if they all converted correctly
if(length(tmp2SampleDate) == length(tmp2SampleDate[!is.na(tmp2SampleDate)])){dt2$SampleDate <- tmp2SampleDate } else {print("Date conversion failed for dt2$SampleDate. Please inspect the data and do the date conversion yourself.")}
rm(tmpDateFormat,tmp2SampleDate)
if (class(dt2$MethodCode)!="factor") dt2$MethodCode<- as.factor(dt2$MethodCode)
if (class(dt2$GearConditionCode)!="factor") dt2$GearConditionCode<- as.factor(dt2$GearConditionCode)
if (class(dt2$WeatherCode)!="factor") dt2$WeatherCode<- as.factor(dt2$WeatherCode)
if (class(dt2$DO)=="factor") dt2$DO <-as.numeric(levels(dt2$DO))[as.integer(dt2$DO) ]
if (class(dt2$DO)=="character") dt2$DO <-as.numeric(dt2$DO)
if (class(dt2$WaterTemp)=="factor") dt2$WaterTemp <-as.numeric(levels(dt2$WaterTemp))[as.integer(dt2$WaterTemp) ]
if (class(dt2$WaterTemp)=="character") dt2$WaterTemp <-as.numeric(dt2$WaterTemp)
if (class(dt2$Turbidity)=="factor") dt2$Turbidity <-as.numeric(levels(dt2$Turbidity))[as.integer(dt2$Turbidity) ]
if (class(dt2$Turbidity)=="character") dt2$Turbidity <-as.numeric(dt2$Turbidity)
if (class(dt2$Secchi)=="factor") dt2$Secchi <-as.numeric(levels(dt2$Secchi))[as.integer(dt2$Secchi) ]
if (class(dt2$Secchi)=="character") dt2$Secchi <-as.numeric(dt2$Secchi)
if (class(dt2$SpecificConductance)=="factor") dt2$SpecificConductance <-as.numeric(levels(dt2$SpecificConductance))[as.integer(dt2$SpecificConductance) ]
if (class(dt2$SpecificConductance)=="character") dt2$SpecificConductance <-as.numeric(dt2$SpecificConductance)
if (class(dt2$TowNumber)=="factor") dt2$TowNumber <-as.numeric(levels(dt2$TowNumber))[as.integer(dt2$TowNumber) ]
if (class(dt2$TowNumber)=="character") dt2$TowNumber <-as.numeric(dt2$TowNumber)
if (class(dt2$SamplingDirection)!="factor") dt2$SamplingDirection<- as.factor(dt2$SamplingDirection)
if (class(dt2$TowDuration)=="factor") dt2$TowDuration <-as.numeric(levels(dt2$TowDuration))[as.integer(dt2$TowDuration) ]
if (class(dt2$TowDuration)=="character") dt2$TowDuration <-as.numeric(dt2$TowDuration)
if (class(dt2$FlowDebris)!="factor") dt2$FlowDebris<- as.factor(dt2$FlowDebris)
if (class(dt2$SiteDisturbance)!="factor") dt2$SiteDisturbance<- as.factor(dt2$SiteDisturbance)
if (class(dt2$AlternateSite)!="factor") dt2$AlternateSite<- as.factor(dt2$AlternateSite)
if (class(dt2$SeineLength)=="factor") dt2$SeineLength <-as.numeric(levels(dt2$SeineLength))[as.integer(dt2$SeineLength) ]
if (class(dt2$SeineLength)=="character") dt2$SeineLength <-as.numeric(dt2$SeineLength)
if (class(dt2$SeineWidth)=="factor") dt2$SeineWidth <-as.numeric(levels(dt2$SeineWidth))[as.integer(dt2$SeineWidth) ]
if (class(dt2$SeineWidth)=="character") dt2$SeineWidth <-as.numeric(dt2$SeineWidth)
if (class(dt2$SeineDepth)=="factor") dt2$SeineDepth <-as.numeric(levels(dt2$SeineDepth))[as.integer(dt2$SeineDepth) ]
if (class(dt2$SeineDepth)=="character") dt2$SeineDepth <-as.numeric(dt2$SeineDepth)
if (class(dt2$FlowmeterStart)=="factor") dt2$FlowmeterStart <-as.numeric(levels(dt2$FlowmeterStart))[as.integer(dt2$FlowmeterStart) ]
if (class(dt2$FlowmeterStart)=="character") dt2$FlowmeterStart <-as.numeric(dt2$FlowmeterStart)
if (class(dt2$FlowmeterEnd)=="factor") dt2$FlowmeterEnd <-as.numeric(levels(dt2$FlowmeterEnd))[as.integer(dt2$FlowmeterEnd) ]
if (class(dt2$FlowmeterEnd)=="character") dt2$FlowmeterEnd <-as.numeric(dt2$FlowmeterEnd)
if (class(dt2$FlowmeterDifference)=="factor") dt2$FlowmeterDifference <-as.numeric(levels(dt2$FlowmeterDifference))[as.integer(dt2$FlowmeterDifference) ]
if (class(dt2$FlowmeterDifference)=="character") dt2$FlowmeterDifference <-as.numeric(dt2$FlowmeterDifference)
if (class(dt2$Volume)=="factor") dt2$Volume <-as.numeric(levels(dt2$Volume))[as.integer(dt2$Volume) ]
if (class(dt2$Volume)=="character") dt2$Volume <-as.numeric(dt2$Volume)
if (class(dt2$OrganismCode)!="factor") dt2$OrganismCode<- as.factor(dt2$OrganismCode)
if (class(dt2$IEPFishCode)!="factor") dt2$IEPFishCode<- as.factor(dt2$IEPFishCode)
if (class(dt2$CommonName)!="factor") dt2$CommonName<- as.factor(dt2$CommonName)
if (class(dt2$MarkCode)!="factor") dt2$MarkCode<- as.factor(dt2$MarkCode)
if (class(dt2$StageCode)!="factor") dt2$StageCode<- as.factor(dt2$StageCode)
if (class(dt2$Expression)!="factor") dt2$Expression<- as.factor(dt2$Expression)
if (class(dt2$ForkLength)=="factor") dt2$ForkLength <-as.numeric(levels(dt2$ForkLength))[as.integer(dt2$ForkLength) ]
if (class(dt2$ForkLength)=="character") dt2$ForkLength <-as.numeric(dt2$ForkLength)
if (class(dt2$RaceByLength)!="factor") dt2$RaceByLength<- as.factor(dt2$RaceByLength)
if (class(dt2$TagCode)!="factor") dt2$TagCode<- as.factor(dt2$TagCode)
if (class(dt2$RaceByTag)!="factor") dt2$RaceByTag<- as.factor(dt2$RaceByTag)
if (class(dt2$ArchivalID)!="factor") dt2$ArchivalID<- as.factor(dt2$ArchivalID)
if (class(dt2$SpecialStudyID)!="factor") dt2$SpecialStudyID<- as.factor(dt2$SpecialStudyID)
if (class(dt2$GeneticID)!="factor") dt2$GeneticID<- as.factor(dt2$GeneticID)
if (class(dt2$Probability1)=="factor") dt2$Probability1 <-as.numeric(levels(dt2$Probability1))[as.integer(dt2$Probability1) ]
if (class(dt2$Probability1)=="character") dt2$Probability1 <-as.numeric(dt2$Probability1)
if (class(dt2$GeneticID2)!="factor") dt2$GeneticID2<- as.factor(dt2$GeneticID2)
if (class(dt2$Probability2)=="factor") dt2$Probability2 <-as.numeric(levels(dt2$Probability2))[as.integer(dt2$Probability2) ]
if (class(dt2$Probability2)=="character") dt2$Probability2 <-as.numeric(dt2$Probability2)
if (class(dt2$SexGeneID)!="factor") dt2$SexGeneID<- as.factor(dt2$SexGeneID)
if (class(dt2$Ots28)!="factor") dt2$Ots28<- as.factor(dt2$Ots28)
if (class(dt2$Lab)!="factor") dt2$Lab<- as.factor(dt2$Lab)
if (class(dt2$GeneticTest)!="factor") dt2$GeneticTest<- as.factor(dt2$GeneticTest)
if (class(dt2$GeneticModel)!="factor") dt2$GeneticModel<- as.factor(dt2$GeneticModel)
if (class(dt2$Count)=="factor") dt2$Count <-as.numeric(levels(dt2$Count))[as.integer(dt2$Count) ]
if (class(dt2$Count)=="character") dt2$Count <-as.numeric(dt2$Count)
# Convert Missing Values to NA for non-dates
dt2$Location <- as.factor(ifelse((trimws(as.character(dt2$Location))==trimws("NA")),NA,as.character(dt2$Location)))
dt2$RegionCode <- as.factor(ifelse((trimws(as.character(dt2$RegionCode))==trimws("NA")),NA,as.character(dt2$RegionCode)))
dt2$StationCode <- as.factor(ifelse((trimws(as.character(dt2$StationCode))==trimws("NA")),NA,as.character(dt2$StationCode)))
dt2$MethodCode <- as.factor(ifelse((trimws(as.character(dt2$MethodCode))==trimws("NA")),NA,as.character(dt2$MethodCode)))
dt2$GearConditionCode <- as.factor(ifelse((trimws(as.character(dt2$GearConditionCode))==trimws("NA")),NA,as.character(dt2$GearConditionCode)))
dt2$WeatherCode <- as.factor(ifelse((trimws(as.character(dt2$WeatherCode))==trimws("NA")),NA,as.character(dt2$WeatherCode)))
dt2$DO <- ifelse((trimws(as.character(dt2$DO))==trimws("NA")),NA,dt2$DO)
suppressWarnings(dt2$DO <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$DO))==as.character(as.numeric("NA"))),NA,dt2$DO))
dt2$WaterTemp <- ifelse((trimws(as.character(dt2$WaterTemp))==trimws("NA")),NA,dt2$WaterTemp)
suppressWarnings(dt2$WaterTemp <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$WaterTemp))==as.character(as.numeric("NA"))),NA,dt2$WaterTemp))
dt2$Turbidity <- ifelse((trimws(as.character(dt2$Turbidity))==trimws("NA")),NA,dt2$Turbidity)
suppressWarnings(dt2$Turbidity <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$Turbidity))==as.character(as.numeric("NA"))),NA,dt2$Turbidity))
dt2$Secchi <- ifelse((trimws(as.character(dt2$Secchi))==trimws("NA")),NA,dt2$Secchi)
suppressWarnings(dt2$Secchi <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$Secchi))==as.character(as.numeric("NA"))),NA,dt2$Secchi))
dt2$SpecificConductance <- ifelse((trimws(as.character(dt2$SpecificConductance))==trimws("NA")),NA,dt2$SpecificConductance)
suppressWarnings(dt2$SpecificConductance <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$SpecificConductance))==as.character(as.numeric("NA"))),NA,dt2$SpecificConductance))
dt2$TowNumber <- ifelse((trimws(as.character(dt2$TowNumber))==trimws("NA")),NA,dt2$TowNumber)
suppressWarnings(dt2$TowNumber <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$TowNumber))==as.character(as.numeric("NA"))),NA,dt2$TowNumber))
dt2$SamplingDirection <- as.factor(ifelse((trimws(as.character(dt2$SamplingDirection))==trimws("NA")),NA,as.character(dt2$SamplingDirection)))
dt2$TowDuration <- ifelse((trimws(as.character(dt2$TowDuration))==trimws("NA")),NA,dt2$TowDuration)
suppressWarnings(dt2$TowDuration <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$TowDuration))==as.character(as.numeric("NA"))),NA,dt2$TowDuration))
dt2$FlowDebris <- as.factor(ifelse((trimws(as.character(dt2$FlowDebris))==trimws("NA")),NA,as.character(dt2$FlowDebris)))
dt2$SiteDisturbance <- as.factor(ifelse((trimws(as.character(dt2$SiteDisturbance))==trimws("NA")),NA,as.character(dt2$SiteDisturbance)))
dt2$AlternateSite <- as.factor(ifelse((trimws(as.character(dt2$AlternateSite))==trimws("NA")),NA,as.character(dt2$AlternateSite)))
dt2$SeineLength <- ifelse((trimws(as.character(dt2$SeineLength))==trimws("NA")),NA,dt2$SeineLength)
suppressWarnings(dt2$SeineLength <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$SeineLength))==as.character(as.numeric("NA"))),NA,dt2$SeineLength))
dt2$SeineWidth <- ifelse((trimws(as.character(dt2$SeineWidth))==trimws("NA")),NA,dt2$SeineWidth)
suppressWarnings(dt2$SeineWidth <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$SeineWidth))==as.character(as.numeric("NA"))),NA,dt2$SeineWidth))
dt2$SeineDepth <- ifelse((trimws(as.character(dt2$SeineDepth))==trimws("NA")),NA,dt2$SeineDepth)
suppressWarnings(dt2$SeineDepth <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$SeineDepth))==as.character(as.numeric("NA"))),NA,dt2$SeineDepth))
dt2$FlowmeterStart <- ifelse((trimws(as.character(dt2$FlowmeterStart))==trimws("NA")),NA,dt2$FlowmeterStart)
suppressWarnings(dt2$FlowmeterStart <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$FlowmeterStart))==as.character(as.numeric("NA"))),NA,dt2$FlowmeterStart))
dt2$FlowmeterEnd <- ifelse((trimws(as.character(dt2$FlowmeterEnd))==trimws("NA")),NA,dt2$FlowmeterEnd)
suppressWarnings(dt2$FlowmeterEnd <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$FlowmeterEnd))==as.character(as.numeric("NA"))),NA,dt2$FlowmeterEnd))
dt2$FlowmeterDifference <- ifelse((trimws(as.character(dt2$FlowmeterDifference))==trimws("NA")),NA,dt2$FlowmeterDifference)
suppressWarnings(dt2$FlowmeterDifference <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$FlowmeterDifference))==as.character(as.numeric("NA"))),NA,dt2$FlowmeterDifference))
dt2$Volume <- ifelse((trimws(as.character(dt2$Volume))==trimws("NA")),NA,dt2$Volume)
suppressWarnings(dt2$Volume <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$Volume))==as.character(as.numeric("NA"))),NA,dt2$Volume))
dt2$OrganismCode <- as.factor(ifelse((trimws(as.character(dt2$OrganismCode))==trimws("NA")),NA,as.character(dt2$OrganismCode)))
dt2$IEPFishCode <- as.factor(ifelse((trimws(as.character(dt2$IEPFishCode))==trimws("NA")),NA,as.character(dt2$IEPFishCode)))
dt2$CommonName <- as.factor(ifelse((trimws(as.character(dt2$CommonName))==trimws("NA")),NA,as.character(dt2$CommonName)))
dt2$MarkCode <- as.factor(ifelse((trimws(as.character(dt2$MarkCode))==trimws("NA")),NA,as.character(dt2$MarkCode)))
dt2$StageCode <- as.factor(ifelse((trimws(as.character(dt2$StageCode))==trimws("NA")),NA,as.character(dt2$StageCode)))
dt2$Expression <- as.factor(ifelse((trimws(as.character(dt2$Expression))==trimws("NA")),NA,as.character(dt2$Expression)))
dt2$ForkLength <- ifelse((trimws(as.character(dt2$ForkLength))==trimws("NA")),NA,dt2$ForkLength)
suppressWarnings(dt2$ForkLength <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$ForkLength))==as.character(as.numeric("NA"))),NA,dt2$ForkLength))
dt2$RaceByLength <- as.factor(ifelse((trimws(as.character(dt2$RaceByLength))==trimws("NA")),NA,as.character(dt2$RaceByLength)))
dt2$TagCode <- as.factor(ifelse((trimws(as.character(dt2$TagCode))==trimws("NA")),NA,as.character(dt2$TagCode)))
dt2$RaceByTag <- as.factor(ifelse((trimws(as.character(dt2$RaceByTag))==trimws("NA")),NA,as.character(dt2$RaceByTag)))
dt2$ArchivalID <- as.factor(ifelse((trimws(as.character(dt2$ArchivalID))==trimws("NA")),NA,as.character(dt2$ArchivalID)))
dt2$SpecialStudyID <- as.factor(ifelse((trimws(as.character(dt2$SpecialStudyID))==trimws("NA")),NA,as.character(dt2$SpecialStudyID)))
dt2$GeneticID <- as.factor(ifelse((trimws(as.character(dt2$GeneticID))==trimws("NA")),NA,as.character(dt2$GeneticID)))
dt2$Probability1 <- ifelse((trimws(as.character(dt2$Probability1))==trimws("NA")),NA,dt2$Probability1)
suppressWarnings(dt2$Probability1 <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$Probability1))==as.character(as.numeric("NA"))),NA,dt2$Probability1))
dt2$GeneticID2 <- as.factor(ifelse((trimws(as.character(dt2$GeneticID2))==trimws("NA")),NA,as.character(dt2$GeneticID2)))
dt2$Probability2 <- ifelse((trimws(as.character(dt2$Probability2))==trimws("NA")),NA,dt2$Probability2)
suppressWarnings(dt2$Probability2 <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$Probability2))==as.character(as.numeric("NA"))),NA,dt2$Probability2))
dt2$SexGeneID <- as.factor(ifelse((trimws(as.character(dt2$SexGeneID))==trimws("NA")),NA,as.character(dt2$SexGeneID)))
dt2$Ots28 <- as.factor(ifelse((trimws(as.character(dt2$Ots28))==trimws("NA")),NA,as.character(dt2$Ots28)))
dt2$Lab <- as.factor(ifelse((trimws(as.character(dt2$Lab))==trimws("NA")),NA,as.character(dt2$Lab)))
dt2$GeneticTest <- as.factor(ifelse((trimws(as.character(dt2$GeneticTest))==trimws("NA")),NA,as.character(dt2$GeneticTest)))
dt2$GeneticModel <- as.factor(ifelse((trimws(as.character(dt2$GeneticModel))==trimws("NA")),NA,as.character(dt2$GeneticModel)))
dt2$Count <- ifelse((trimws(as.character(dt2$Count))==trimws("NA")),NA,dt2$Count)
suppressWarnings(dt2$Count <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt2$Count))==as.character(as.numeric("NA"))),NA,dt2$Count))
# Here is the structure of the input data frame:
str(dt2)
attach(dt2)
# The analyses below are basic descriptions of the variables. After testing, they should be replaced.
summary(Location)
summary(RegionCode)
summary(StationCode)
summary(SampleDate)
summary(SampleTime)
summary(MethodCode)
summary(GearConditionCode)
summary(WeatherCode)
summary(DO)
summary(WaterTemp)
summary(Turbidity)
summary(Secchi)
summary(SpecificConductance)
summary(TowNumber)
summary(SamplingDirection)
summary(TowDuration)
summary(FlowDebris)
summary(SiteDisturbance)
summary(AlternateSite)
summary(SeineLength)
summary(SeineWidth)
summary(SeineDepth)
summary(FlowmeterStart)
summary(FlowmeterEnd)
summary(FlowmeterDifference)
summary(Volume)
summary(OrganismCode)
summary(IEPFishCode)
summary(CommonName)
summary(MarkCode)
summary(StageCode)
summary(Expression)
summary(ForkLength)
summary(RaceByLength)
summary(TagCode)
summary(RaceByTag)
summary(ArchivalID)
summary(SpecialStudyID)
summary(GeneticID)
summary(Probability1)
summary(GeneticID2)
summary(Probability2)
summary(SexGeneID)
summary(Ots28)
summary(Lab)
summary(GeneticTest)
summary(GeneticModel)
summary(Count)
# Get more details on character variables
summary(as.factor(dt2$Location))
summary(as.factor(dt2$RegionCode))
summary(as.factor(dt2$StationCode))
summary(as.factor(dt2$MethodCode))
summary(as.factor(dt2$GearConditionCode))
summary(as.factor(dt2$WeatherCode))
summary(as.factor(dt2$SamplingDirection))
summary(as.factor(dt2$FlowDebris))
summary(as.factor(dt2$SiteDisturbance))
summary(as.factor(dt2$AlternateSite))
summary(as.factor(dt2$OrganismCode))
summary(as.factor(dt2$IEPFishCode))
summary(as.factor(dt2$CommonName))
summary(as.factor(dt2$MarkCode))
summary(as.factor(dt2$StageCode))
summary(as.factor(dt2$Expression))
summary(as.factor(dt2$RaceByLength))
summary(as.factor(dt2$TagCode))
summary(as.factor(dt2$RaceByTag))
summary(as.factor(dt2$ArchivalID))
summary(as.factor(dt2$SpecialStudyID))
summary(as.factor(dt2$GeneticID))
summary(as.factor(dt2$GeneticID2))
summary(as.factor(dt2$SexGeneID))
summary(as.factor(dt2$Ots28))
summary(as.factor(dt2$Lab))
summary(as.factor(dt2$GeneticTest))
summary(as.factor(dt2$GeneticModel))
detach(dt2)
# data manipulation #
#####################
# merge the two time periods together
#colnames(dt2)==colnames(dt3)
dataset<-rbind(dt1,dt2)
#remove(dt1,dt2)
# remove all the unnecessary middle columns
#dataset <- dataset[,c("Location","StationCode", "SampleDate",
#                      "SampleTime", "MethodCode", "OrganismCode",
#                      "IEPFishCode",         "CommonName",          "MarkCode",
#                      "StageCode",           "Expression",          "ForkLength",
#                      "RaceByLength",        "TagCode",             "RaceByTag",
#                      "ArchivalID",          "SpecialStudyID",      "GeneticID",
#                      "Probability1",        "GeneticID2",          "Probability2",
#                      "SexGeneID",           "Ots28",               "Lab",
#                      "GeneticTest",         "GeneticModel",        "Count" )]
# Note that View will truncate some of the columns (but they are still there!)
# Add Water Year
dataset$WY <- year(dataset$SampleDate) +
as.numeric(between(month(dataset$SampleDate),10,12))
# consider: addWaterYear() in the dataRetrieval package
# add day of water year
# use difftime to get wtr_day to be the number of days from 9-30
dataset <- dataset %>%
group_by(WY) %>%
mutate(wtr_day = (as.integer(difftime(
SampleDate,ymd(paste0(WY - 1 ,'-09-30')), units = "days"))))
# Add water year type & drought period year type
dataset <- left_join(dataset,DroughtYr[,c(1:4)], by="WY")
# clip dataset to stations we want: Chipps Island and Sherwood Trawl
# and only trawl data
Trawl <- dataset[((dataset$Location %in% c("Chipps Island","Sherwood Harbor")))&
((dataset$MethodCode %in% c("KDTR","MWTR"))),]
#Trawl <- dataset[dataset$Location=="Chipps Island",]
#unique(Trawl[Trawl$MethodCode %in% c("KDTR","MWTR"),]$StationCode)
#unique(Trawl$Location)
#unique(Trawl$MethodCode)
#remove(dataset)
# Species = combine CommonName + RaceByLength to get species/run
Trawl$Species <- as.character(Trawl$CommonName)
Trawl$Species[Trawl$CommonName=="Chinook salmon"] <- paste(
Trawl$RaceByLength[Trawl$CommonName=="Chinook salmon"],"-run ",
"Chinook salmon",sep="")
# remove WY 2022, since it is incomplete
Trawl <-Trawl[!Trawl$WY==2022,]
################################################
# creating a dataframe of sample dates         #
# want a row for every species/run of interest #
# for every sample date                        #
################################################
# this will ensure we have a 0 count for samples when there was sampling
# but wasn't any catch of each species of interest
# dataframe of every sampling date*location
# removed station code b/c it was actually by station (not "location") before
Trawl_sampledates <-Trawl %>%
group_by(SampleDate) %>%
dplyr::summarize(
WY = WY,
Location = Location,
StationCode = StationCode,
SampleDate = SampleDate,
MethodCode = MethodCode,
TowNumber = TowNumber,
#ForkLength = ForkLength,
wtr_day = wtr_day,
Drought = Drought,
Yr_type = Yr_type
)
#remove duplicate rows
Trawl_sampledates <- Trawl_sampledates[!duplicated(Trawl_sampledates),]
#length(Trawl_sampledates$SampleDate)
#length(unique(Trawl_sampledates$SampleDate))
# need this whole df for every species
# add Species (empty for now)
Trawl_sampledates$Species <- character(length(Trawl_sampledates$SampleDate))
# want juvenile NMFS ESA/MSA species
species_list <- c("Fall-run Chinook salmon",
#"NA-run Chinook salmon",
"Winter-run Chinook salmon",
"steelhead trout",
"LateFall-run Chinook salmon",
"Spring-run Chinook salmon")
# create dataframe with a row for each date*location*each species of interest
for (i in species_list){
samples <- Trawl_sampledates
samples$Species <- i
if(i==species_list[1]){ # if first in list, create data frame
interest_samples <- samples
} else { # if data frame exists, add to it
interest_samples <- rbind(interest_samples, samples)
}
}
remove(samples)
#length(Trawl_sampledates$SampleDate)
#length(interest_samples$SampleDate)/length(species_list)
#add Count to samples dataframe (zeros here; will be combined with count data)
interest_samples$Count <- 0
# add back Fork_Length
interest_samples$ForkLength <- numeric(length(interest_samples$SampleDate))
#############################################
# combine data w/ dates/species of interest #
#############################################
# will have at least one row for every date*location*species of interest
# clip trawl data to that of interest
Trawl2 <- Trawl[(Trawl$Species %in% species_list),# clip to species of interest
c(colnames(interest_samples))] # clip to the same columns as my sample/date/species list
# combine data with rows in interest samples
Trawl2 <- rbind(Trawl2,interest_samples) #
###################################
# expanded dataframe for plotting #
###################################
# for the plots, need to expand this to have a row per sample/count
# need the number of rows = count for ridge/density plotting
# expand rows to account for Catch
Trawl2.expanded <- Trawl2[rep(row.names(Trawl2), Trawl2$Count), ]
# rerunning the code and the WYT is not ordered factor...
# let's fix that
Trawl2.expanded$Yr_type <- factor(Trawl2.expanded$Yr_type, levels=c("Wet","Above Normal","Below Normal","Dry","Critical"), ordered=TRUE)
# add code to switch order of sites (Sherwood on left)
Trawl2.expanded[Trawl2.expanded$Species %in% c("Winter-run Chinook salmon","Spring-run Chinook salmon","Fall-run Chinook salmon"),] %>%
mutate(across(Location, factor, levels=c("Sherwood Harbor","Chipps Island"))) %>%
ggplot(aes(x = wtr_day, y = Species,
color = Yr_type,
fill = Yr_type)) +scale_fill_manual(name = "Water Year Type",values=pal_yrtype) +
scale_color_manual(name = "Water Year Type",values=pal_yrtype) +
geom_density_ridges(alpha = .3, scale=0.95) +
labs(title = "Chinook Salmon Trawl Catch Timing (1988-2021)",
x = "Day of the water year",
y = "Run Type") + theme_bw() +
scale_y_discrete(labels = c("Winter-run","Spring-run","Fall-run")) +
facet_wrap(~Location)
ggsave("Trawls WYT timing.tiff", device = "tiff", width = 9, height = 6, units = "in")
# add code to switch order of sites (Sherwood on left)
Trawl2.expanded[Trawl2.expanded$Species %in% c("Winter-run Chinook salmon","Spring-run Chinook salmon","Fall-run Chinook salmon"),] %>%
mutate(across(Location, factor, levels=c("Sherwood Harbor","Chipps Island"))) %>%
ggplot(aes(x = wtr_day, y = Species,
color = Yr_type,
fill = Yr_type)) +scale_fill_manual(name = "Water Year Type",values=pal_yrtype) +
scale_color_manual(name = "Water Year Type",values=pal_yrtype) +
geom_density_ridges(alpha = .3, scale=0.95) +
labs(title = "Chinook Salmon Trawl Catch Timing (1988-2021)",
x = "Day of the water year",
y = "Run Type") + theme_bw() +
scale_y_discrete(labels = c("Fall-run","Spring-run","Winter-run")) +
facet_wrap(~Location)
# add code to switch order of sites (Sherwood on left)
Trawl2.expanded[Trawl2.expanded$Species %in% c("Winter-run Chinook salmon","Spring-run Chinook salmon","Fall-run Chinook salmon"),] %>%
mutate(across(Location, factor, levels=c("Sherwood Harbor","Chipps Island"))) %>%
ggplot(aes(x = wtr_day, y = Species,
color = Yr_type,
fill = Yr_type)) +scale_fill_manual(name = "Water Year Type",values=pal_yrtype) +
scale_color_manual(name = "Water Year Type",values=pal_yrtype) +
geom_density_ridges(alpha = .3, scale=0.95) +
labs(title = "Chinook Salmon Trawl Catch Timing (1988-2021)",
x = "Day of the water year",
y = "Run Type") + theme_bw() +
#scale_y_discrete(labels = c("Fall-run","Spring-run","Winter-run")) +
facet_wrap(~Location)
# add code to switch order of sites (Sherwood on left)
Trawl2.expanded[Trawl2.expanded$Species %in% c("Winter-run Chinook salmon","Spring-run Chinook salmon","Fall-run Chinook salmon"),] %>%
mutate(across(Location, factor, levels=c("Sherwood Harbor","Chipps Island"))) %>%
ggplot(aes(x = wtr_day, y = Species,
color = Yr_type,
fill = Yr_type)) +scale_fill_manual(name = "Water Year Type",values=pal_yrtype) +
scale_color_manual(name = "Water Year Type",values=pal_yrtype) +
geom_density_ridges(alpha = .3, scale=0.95) +
labs(title = "Chinook Salmon Trawl Catch Timing (1988-2021)",
x = "Day of the water year",
y = "Run Type") + theme_bw() +
scale_y_discrete(labels = c("Fall-run","Spring-run","Winter-run")) + # labels bottom to top??
facet_wrap(~Location)
ggsave("Trawls WYT timing.tiff", device = "tiff", width = 9, height = 6, units = "in")
