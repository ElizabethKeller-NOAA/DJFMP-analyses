summary(Secchi)
summary(SpecificConductance)
summary(TowNumber)
summary(SamplingDirection)
summary(TowDuration)
summary(FlowDebris)
summary(SiteDisturbance)
summary(AlternateSite)
summary(SeineLength)
summary(SeineWidth)
summary(SeineDepth)
summary(FlowmeterStart)
summary(FlowmeterEnd)
summary(FlowmeterDifference)
summary(Volume)
summary(OrganismCode)
summary(IEPFishCode)
summary(CommonName)
summary(MarkCode)
summary(StageCode)
summary(Expression)
summary(ForkLength)
summary(RaceByLength)
summary(TagCode)
summary(RaceByTag)
summary(ArchivalID)
summary(SpecialStudyID)
summary(GeneticID)
summary(Probability1)
summary(GeneticID2)
summary(Probability2)
summary(SexGeneID)
summary(Ots28)
summary(Lab)
summary(GeneticTest)
summary(GeneticModel)
summary(Count)
# Get more details on character variables
summary(as.factor(dt2$Location))
summary(as.factor(dt2$RegionCode))
summary(as.factor(dt2$StationCode))
summary(as.factor(dt2$MethodCode))
summary(as.factor(dt2$GearConditionCode))
summary(as.factor(dt2$WeatherCode))
summary(as.factor(dt2$SamplingDirection))
summary(as.factor(dt2$FlowDebris))
summary(as.factor(dt2$SiteDisturbance))
summary(as.factor(dt2$AlternateSite))
summary(as.factor(dt2$OrganismCode))
summary(as.factor(dt2$IEPFishCode))
summary(as.factor(dt2$CommonName))
summary(as.factor(dt2$MarkCode))
summary(as.factor(dt2$StageCode))
summary(as.factor(dt2$Expression))
summary(as.factor(dt2$RaceByLength))
summary(as.factor(dt2$TagCode))
summary(as.factor(dt2$RaceByTag))
summary(as.factor(dt2$ArchivalID))
summary(as.factor(dt2$SpecialStudyID))
summary(as.factor(dt2$GeneticID))
summary(as.factor(dt2$GeneticID2))
summary(as.factor(dt2$SexGeneID))
summary(as.factor(dt2$Ots28))
summary(as.factor(dt2$Lab))
summary(as.factor(dt2$GeneticTest))
summary(as.factor(dt2$GeneticModel))
detach(dt2)
#######
# dt3 #
#######
# file from: "https://pasta.lternet.edu/package/data/eml/edi/244/9/147fd5e2c7db15913b2ffa44410dc7f9"
dt3 <-read.csv("1976-2021_DJFMP_beach_seine_fish_and_water_quality_data.csv",header=F
,skip=1
,sep=","
,quot='"'
, col.names=c(
"Location",
"RegionCode",
"StationCode",
"SampleDate",
"SampleTime",
"MethodCode",
"GearConditionCode",
"WeatherCode",
"DO",
"WaterTemp",
"Turbidity",
"Secchi",
"SpecificConductance",
"TowNumber",
"SamplingDirection",
"TowDuration",
"FlowDebris",
"SiteDisturbance",
"AlternateSite",
"SeineLength",
"SeineWidth",
"SeineDepth",
"FlowmeterStart",
"FlowmeterEnd",
"FlowmeterDifference",
"Volume",
"OrganismCode",
"IEPFishCode",
"CommonName",
"MarkCode",
"StageCode",
"Expression",
"ForkLength",
"RaceByLength",
"TagCode",
"RaceByTag",
"ArchivalID",
"SpecialStudyID",
"GeneticID",
"Probability1",
"GeneticID2",
"Probability2",
"SexGeneID",
"Ots28",
"Lab",
"GeneticTest",
"GeneticModel",
"Count"    ), check.names=TRUE)
#unlink(infile3)
# Fix any interval or ratio columns mistakenly read in as nominal and nominal columns read as numeric or dates read as strings
if (class(dt3$Location)!="factor") dt3$Location<- as.factor(dt3$Location)
if (class(dt3$RegionCode)!="factor") dt3$RegionCode<- as.factor(dt3$RegionCode)
if (class(dt3$StationCode)!="factor") dt3$StationCode<- as.factor(dt3$StationCode)
# attempting to convert dt3$SampleDate dateTime string to R date structure (date or POSIXct)
tmpDateFormat<-"%Y-%m-%d"
tmp3SampleDate<-as.Date(dt3$SampleDate,format=tmpDateFormat)
# Keep the new dates only if they all converted correctly
if(length(tmp3SampleDate) == length(tmp3SampleDate[!is.na(tmp3SampleDate)])){dt3$SampleDate <- tmp3SampleDate } else {print("Date conversion failed for dt3$SampleDate. Please inspect the data and do the date conversion yourself.")}
rm(tmpDateFormat,tmp3SampleDate)
if (class(dt3$MethodCode)!="factor") dt3$MethodCode<- as.factor(dt3$MethodCode)
if (class(dt3$GearConditionCode)!="factor") dt3$GearConditionCode<- as.factor(dt3$GearConditionCode)
if (class(dt3$WeatherCode)!="factor") dt3$WeatherCode<- as.factor(dt3$WeatherCode)
if (class(dt3$DO)=="factor") dt3$DO <-as.numeric(levels(dt3$DO))[as.integer(dt3$DO) ]
if (class(dt3$DO)=="character") dt3$DO <-as.numeric(dt3$DO)
if (class(dt3$WaterTemp)=="factor") dt3$WaterTemp <-as.numeric(levels(dt3$WaterTemp))[as.integer(dt3$WaterTemp) ]
if (class(dt3$WaterTemp)=="character") dt3$WaterTemp <-as.numeric(dt3$WaterTemp)
if (class(dt3$Turbidity)=="factor") dt3$Turbidity <-as.numeric(levels(dt3$Turbidity))[as.integer(dt3$Turbidity) ]
if (class(dt3$Turbidity)=="character") dt3$Turbidity <-as.numeric(dt3$Turbidity)
if (class(dt3$Secchi)=="factor") dt3$Secchi <-as.numeric(levels(dt3$Secchi))[as.integer(dt3$Secchi) ]
if (class(dt3$Secchi)=="character") dt3$Secchi <-as.numeric(dt3$Secchi)
if (class(dt3$SpecificConductance)=="factor") dt3$SpecificConductance <-as.numeric(levels(dt3$SpecificConductance))[as.integer(dt3$SpecificConductance) ]
if (class(dt3$SpecificConductance)=="character") dt3$SpecificConductance <-as.numeric(dt3$SpecificConductance)
if (class(dt3$TowNumber)=="factor") dt3$TowNumber <-as.numeric(levels(dt3$TowNumber))[as.integer(dt3$TowNumber) ]
if (class(dt3$TowNumber)=="character") dt3$TowNumber <-as.numeric(dt3$TowNumber)
if (class(dt3$SamplingDirection)!="factor") dt3$SamplingDirection<- as.factor(dt3$SamplingDirection)
if (class(dt3$TowDuration)=="factor") dt3$TowDuration <-as.numeric(levels(dt3$TowDuration))[as.integer(dt3$TowDuration) ]
if (class(dt3$TowDuration)=="character") dt3$TowDuration <-as.numeric(dt3$TowDuration)
if (class(dt3$FlowDebris)!="factor") dt3$FlowDebris<- as.factor(dt3$FlowDebris)
if (class(dt3$SiteDisturbance)!="factor") dt3$SiteDisturbance<- as.factor(dt3$SiteDisturbance)
if (class(dt3$AlternateSite)!="factor") dt3$AlternateSite<- as.factor(dt3$AlternateSite)
if (class(dt3$SeineLength)=="factor") dt3$SeineLength <-as.numeric(levels(dt3$SeineLength))[as.integer(dt3$SeineLength) ]
if (class(dt3$SeineLength)=="character") dt3$SeineLength <-as.numeric(dt3$SeineLength)
if (class(dt3$SeineWidth)=="factor") dt3$SeineWidth <-as.numeric(levels(dt3$SeineWidth))[as.integer(dt3$SeineWidth) ]
if (class(dt3$SeineWidth)=="character") dt3$SeineWidth <-as.numeric(dt3$SeineWidth)
if (class(dt3$SeineDepth)=="factor") dt3$SeineDepth <-as.numeric(levels(dt3$SeineDepth))[as.integer(dt3$SeineDepth) ]
if (class(dt3$SeineDepth)=="character") dt3$SeineDepth <-as.numeric(dt3$SeineDepth)
if (class(dt3$FlowmeterStart)=="factor") dt3$FlowmeterStart <-as.numeric(levels(dt3$FlowmeterStart))[as.integer(dt3$FlowmeterStart) ]
if (class(dt3$FlowmeterStart)=="character") dt3$FlowmeterStart <-as.numeric(dt3$FlowmeterStart)
if (class(dt3$FlowmeterEnd)=="factor") dt3$FlowmeterEnd <-as.numeric(levels(dt3$FlowmeterEnd))[as.integer(dt3$FlowmeterEnd) ]
if (class(dt3$FlowmeterEnd)=="character") dt3$FlowmeterEnd <-as.numeric(dt3$FlowmeterEnd)
if (class(dt3$FlowmeterDifference)=="factor") dt3$FlowmeterDifference <-as.numeric(levels(dt3$FlowmeterDifference))[as.integer(dt3$FlowmeterDifference) ]
if (class(dt3$FlowmeterDifference)=="character") dt3$FlowmeterDifference <-as.numeric(dt3$FlowmeterDifference)
if (class(dt3$Volume)=="factor") dt3$Volume <-as.numeric(levels(dt3$Volume))[as.integer(dt3$Volume) ]
if (class(dt3$Volume)=="character") dt3$Volume <-as.numeric(dt3$Volume)
if (class(dt3$OrganismCode)!="factor") dt3$OrganismCode<- as.factor(dt3$OrganismCode)
if (class(dt3$IEPFishCode)!="factor") dt3$IEPFishCode<- as.factor(dt3$IEPFishCode)
if (class(dt3$CommonName)!="factor") dt3$CommonName<- as.factor(dt3$CommonName)
if (class(dt3$MarkCode)!="factor") dt3$MarkCode<- as.factor(dt3$MarkCode)
if (class(dt3$StageCode)!="factor") dt3$StageCode<- as.factor(dt3$StageCode)
if (class(dt3$Expression)!="factor") dt3$Expression<- as.factor(dt3$Expression)
if (class(dt3$ForkLength)=="factor") dt3$ForkLength <-as.numeric(levels(dt3$ForkLength))[as.integer(dt3$ForkLength) ]
if (class(dt3$ForkLength)=="character") dt3$ForkLength <-as.numeric(dt3$ForkLength)
if (class(dt3$RaceByLength)!="factor") dt3$RaceByLength<- as.factor(dt3$RaceByLength)
if (class(dt3$TagCode)!="factor") dt3$TagCode<- as.factor(dt3$TagCode)
if (class(dt3$RaceByTag)!="factor") dt3$RaceByTag<- as.factor(dt3$RaceByTag)
if (class(dt3$ArchivalID)!="factor") dt3$ArchivalID<- as.factor(dt3$ArchivalID)
if (class(dt3$SpecialStudyID)!="factor") dt3$SpecialStudyID<- as.factor(dt3$SpecialStudyID)
if (class(dt3$GeneticID)!="factor") dt3$GeneticID<- as.factor(dt3$GeneticID)
if (class(dt3$Probability1)=="factor") dt3$Probability1 <-as.numeric(levels(dt3$Probability1))[as.integer(dt3$Probability1) ]
if (class(dt3$Probability1)=="character") dt3$Probability1 <-as.numeric(dt3$Probability1)
if (class(dt3$GeneticID2)!="factor") dt3$GeneticID2<- as.factor(dt3$GeneticID2)
if (class(dt3$Probability2)=="factor") dt3$Probability2 <-as.numeric(levels(dt3$Probability2))[as.integer(dt3$Probability2) ]
if (class(dt3$Probability2)=="character") dt3$Probability2 <-as.numeric(dt3$Probability2)
if (class(dt3$SexGeneID)!="factor") dt3$SexGeneID<- as.factor(dt3$SexGeneID)
if (class(dt3$Ots28)!="factor") dt3$Ots28<- as.factor(dt3$Ots28)
if (class(dt3$Lab)!="factor") dt3$Lab<- as.factor(dt3$Lab)
if (class(dt3$GeneticTest)!="factor") dt3$GeneticTest<- as.factor(dt3$GeneticTest)
if (class(dt3$GeneticModel)!="factor") dt3$GeneticModel<- as.factor(dt3$GeneticModel)
if (class(dt3$Count)=="factor") dt3$Count <-as.numeric(levels(dt3$Count))[as.integer(dt3$Count) ]
if (class(dt3$Count)=="character") dt3$Count <-as.numeric(dt3$Count)
# Convert Missing Values to NA for non-dates
dt3$Location <- as.factor(ifelse((trimws(as.character(dt3$Location))==trimws("NA")),NA,as.character(dt3$Location)))
dt3$RegionCode <- as.factor(ifelse((trimws(as.character(dt3$RegionCode))==trimws("NA")),NA,as.character(dt3$RegionCode)))
dt3$StationCode <- as.factor(ifelse((trimws(as.character(dt3$StationCode))==trimws("NA")),NA,as.character(dt3$StationCode)))
dt3$MethodCode <- as.factor(ifelse((trimws(as.character(dt3$MethodCode))==trimws("NA")),NA,as.character(dt3$MethodCode)))
dt3$GearConditionCode <- as.factor(ifelse((trimws(as.character(dt3$GearConditionCode))==trimws("NA")),NA,as.character(dt3$GearConditionCode)))
dt3$WeatherCode <- as.factor(ifelse((trimws(as.character(dt3$WeatherCode))==trimws("NA")),NA,as.character(dt3$WeatherCode)))
dt3$DO <- ifelse((trimws(as.character(dt3$DO))==trimws("NA")),NA,dt3$DO)
suppressWarnings(dt3$DO <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$DO))==as.character(as.numeric("NA"))),NA,dt3$DO))
dt3$WaterTemp <- ifelse((trimws(as.character(dt3$WaterTemp))==trimws("NA")),NA,dt3$WaterTemp)
suppressWarnings(dt3$WaterTemp <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$WaterTemp))==as.character(as.numeric("NA"))),NA,dt3$WaterTemp))
dt3$Turbidity <- ifelse((trimws(as.character(dt3$Turbidity))==trimws("NA")),NA,dt3$Turbidity)
suppressWarnings(dt3$Turbidity <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$Turbidity))==as.character(as.numeric("NA"))),NA,dt3$Turbidity))
dt3$Secchi <- ifelse((trimws(as.character(dt3$Secchi))==trimws("NA")),NA,dt3$Secchi)
suppressWarnings(dt3$Secchi <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$Secchi))==as.character(as.numeric("NA"))),NA,dt3$Secchi))
dt3$SpecificConductance <- ifelse((trimws(as.character(dt3$SpecificConductance))==trimws("NA")),NA,dt3$SpecificConductance)
suppressWarnings(dt3$SpecificConductance <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$SpecificConductance))==as.character(as.numeric("NA"))),NA,dt3$SpecificConductance))
dt3$TowNumber <- ifelse((trimws(as.character(dt3$TowNumber))==trimws("NA")),NA,dt3$TowNumber)
suppressWarnings(dt3$TowNumber <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$TowNumber))==as.character(as.numeric("NA"))),NA,dt3$TowNumber))
dt3$SamplingDirection <- as.factor(ifelse((trimws(as.character(dt3$SamplingDirection))==trimws("NA")),NA,as.character(dt3$SamplingDirection)))
dt3$TowDuration <- ifelse((trimws(as.character(dt3$TowDuration))==trimws("NA")),NA,dt3$TowDuration)
suppressWarnings(dt3$TowDuration <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$TowDuration))==as.character(as.numeric("NA"))),NA,dt3$TowDuration))
dt3$FlowDebris <- as.factor(ifelse((trimws(as.character(dt3$FlowDebris))==trimws("NA")),NA,as.character(dt3$FlowDebris)))
dt3$SiteDisturbance <- as.factor(ifelse((trimws(as.character(dt3$SiteDisturbance))==trimws("NA")),NA,as.character(dt3$SiteDisturbance)))
dt3$AlternateSite <- as.factor(ifelse((trimws(as.character(dt3$AlternateSite))==trimws("NA")),NA,as.character(dt3$AlternateSite)))
dt3$SeineLength <- ifelse((trimws(as.character(dt3$SeineLength))==trimws("NA")),NA,dt3$SeineLength)
suppressWarnings(dt3$SeineLength <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$SeineLength))==as.character(as.numeric("NA"))),NA,dt3$SeineLength))
dt3$SeineWidth <- ifelse((trimws(as.character(dt3$SeineWidth))==trimws("NA")),NA,dt3$SeineWidth)
suppressWarnings(dt3$SeineWidth <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$SeineWidth))==as.character(as.numeric("NA"))),NA,dt3$SeineWidth))
dt3$SeineDepth <- ifelse((trimws(as.character(dt3$SeineDepth))==trimws("NA")),NA,dt3$SeineDepth)
suppressWarnings(dt3$SeineDepth <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$SeineDepth))==as.character(as.numeric("NA"))),NA,dt3$SeineDepth))
dt3$FlowmeterStart <- ifelse((trimws(as.character(dt3$FlowmeterStart))==trimws("NA")),NA,dt3$FlowmeterStart)
suppressWarnings(dt3$FlowmeterStart <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$FlowmeterStart))==as.character(as.numeric("NA"))),NA,dt3$FlowmeterStart))
dt3$FlowmeterEnd <- ifelse((trimws(as.character(dt3$FlowmeterEnd))==trimws("NA")),NA,dt3$FlowmeterEnd)
suppressWarnings(dt3$FlowmeterEnd <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$FlowmeterEnd))==as.character(as.numeric("NA"))),NA,dt3$FlowmeterEnd))
dt3$FlowmeterDifference <- ifelse((trimws(as.character(dt3$FlowmeterDifference))==trimws("NA")),NA,dt3$FlowmeterDifference)
suppressWarnings(dt3$FlowmeterDifference <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$FlowmeterDifference))==as.character(as.numeric("NA"))),NA,dt3$FlowmeterDifference))
dt3$Volume <- ifelse((trimws(as.character(dt3$Volume))==trimws("NA")),NA,dt3$Volume)
suppressWarnings(dt3$Volume <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$Volume))==as.character(as.numeric("NA"))),NA,dt3$Volume))
dt3$OrganismCode <- as.factor(ifelse((trimws(as.character(dt3$OrganismCode))==trimws("NA")),NA,as.character(dt3$OrganismCode)))
dt3$IEPFishCode <- as.factor(ifelse((trimws(as.character(dt3$IEPFishCode))==trimws("NA")),NA,as.character(dt3$IEPFishCode)))
dt3$CommonName <- as.factor(ifelse((trimws(as.character(dt3$CommonName))==trimws("NA")),NA,as.character(dt3$CommonName)))
dt3$MarkCode <- as.factor(ifelse((trimws(as.character(dt3$MarkCode))==trimws("NA")),NA,as.character(dt3$MarkCode)))
dt3$StageCode <- as.factor(ifelse((trimws(as.character(dt3$StageCode))==trimws("NA")),NA,as.character(dt3$StageCode)))
dt3$Expression <- as.factor(ifelse((trimws(as.character(dt3$Expression))==trimws("NA")),NA,as.character(dt3$Expression)))
dt3$ForkLength <- ifelse((trimws(as.character(dt3$ForkLength))==trimws("NA")),NA,dt3$ForkLength)
suppressWarnings(dt3$ForkLength <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$ForkLength))==as.character(as.numeric("NA"))),NA,dt3$ForkLength))
dt3$RaceByLength <- as.factor(ifelse((trimws(as.character(dt3$RaceByLength))==trimws("NA")),NA,as.character(dt3$RaceByLength)))
dt3$TagCode <- as.factor(ifelse((trimws(as.character(dt3$TagCode))==trimws("NA")),NA,as.character(dt3$TagCode)))
dt3$RaceByTag <- as.factor(ifelse((trimws(as.character(dt3$RaceByTag))==trimws("NA")),NA,as.character(dt3$RaceByTag)))
dt3$ArchivalID <- as.factor(ifelse((trimws(as.character(dt3$ArchivalID))==trimws("NA")),NA,as.character(dt3$ArchivalID)))
dt3$SpecialStudyID <- as.factor(ifelse((trimws(as.character(dt3$SpecialStudyID))==trimws("NA")),NA,as.character(dt3$SpecialStudyID)))
dt3$GeneticID <- as.factor(ifelse((trimws(as.character(dt3$GeneticID))==trimws("NA")),NA,as.character(dt3$GeneticID)))
dt3$Probability1 <- ifelse((trimws(as.character(dt3$Probability1))==trimws("NA")),NA,dt3$Probability1)
suppressWarnings(dt3$Probability1 <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$Probability1))==as.character(as.numeric("NA"))),NA,dt3$Probability1))
dt3$GeneticID2 <- as.factor(ifelse((trimws(as.character(dt3$GeneticID2))==trimws("NA")),NA,as.character(dt3$GeneticID2)))
dt3$Probability2 <- ifelse((trimws(as.character(dt3$Probability2))==trimws("NA")),NA,dt3$Probability2)
suppressWarnings(dt3$Probability2 <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$Probability2))==as.character(as.numeric("NA"))),NA,dt3$Probability2))
dt3$SexGeneID <- as.factor(ifelse((trimws(as.character(dt3$SexGeneID))==trimws("NA")),NA,as.character(dt3$SexGeneID)))
dt3$Ots28 <- as.factor(ifelse((trimws(as.character(dt3$Ots28))==trimws("NA")),NA,as.character(dt3$Ots28)))
dt3$Lab <- as.factor(ifelse((trimws(as.character(dt3$Lab))==trimws("NA")),NA,as.character(dt3$Lab)))
dt3$GeneticTest <- as.factor(ifelse((trimws(as.character(dt3$GeneticTest))==trimws("NA")),NA,as.character(dt3$GeneticTest)))
dt3$GeneticModel <- as.factor(ifelse((trimws(as.character(dt3$GeneticModel))==trimws("NA")),NA,as.character(dt3$GeneticModel)))
dt3$Count <- ifelse((trimws(as.character(dt3$Count))==trimws("NA")),NA,dt3$Count)
suppressWarnings(dt3$Count <- ifelse(!is.na(as.numeric("NA")) & (trimws(as.character(dt3$Count))==as.character(as.numeric("NA"))),NA,dt3$Count))
# Here is the structure of the input data frame:
str(dt3)
attach(dt3)
# The analyses below are basic descriptions of the variables. After testing, they should be replaced.
summary(Location)
summary(RegionCode)
summary(StationCode)
summary(SampleDate)
summary(SampleTime)
summary(MethodCode)
summary(GearConditionCode)
summary(WeatherCode)
summary(DO)
summary(WaterTemp)
summary(Turbidity)
summary(Secchi)
summary(SpecificConductance)
summary(TowNumber)
summary(SamplingDirection)
summary(TowDuration)
summary(FlowDebris)
summary(SiteDisturbance)
summary(AlternateSite)
summary(SeineLength)
summary(SeineWidth)
summary(SeineDepth)
summary(FlowmeterStart)
summary(FlowmeterEnd)
summary(FlowmeterDifference)
summary(Volume)
summary(OrganismCode)
summary(IEPFishCode)
summary(CommonName)
summary(MarkCode)
summary(StageCode)
summary(Expression)
summary(ForkLength)
summary(RaceByLength)
summary(TagCode)
summary(RaceByTag)
summary(ArchivalID)
summary(SpecialStudyID)
summary(GeneticID)
summary(Probability1)
summary(GeneticID2)
summary(Probability2)
summary(SexGeneID)
summary(Ots28)
summary(Lab)
summary(GeneticTest)
summary(GeneticModel)
summary(Count)
# Get more details on character variables
summary(as.factor(dt3$Location))
summary(as.factor(dt3$RegionCode))
summary(as.factor(dt3$StationCode))
summary(as.factor(dt3$MethodCode))
summary(as.factor(dt3$GearConditionCode))
summary(as.factor(dt3$WeatherCode))
summary(as.factor(dt3$SamplingDirection))
summary(as.factor(dt3$FlowDebris))
summary(as.factor(dt3$SiteDisturbance))
summary(as.factor(dt3$AlternateSite))
summary(as.factor(dt3$OrganismCode))
summary(as.factor(dt3$IEPFishCode))
summary(as.factor(dt3$CommonName))
summary(as.factor(dt3$MarkCode))
summary(as.factor(dt3$StageCode))
summary(as.factor(dt3$Expression))
summary(as.factor(dt3$RaceByLength))
summary(as.factor(dt3$TagCode))
summary(as.factor(dt3$RaceByTag))
summary(as.factor(dt3$ArchivalID))
summary(as.factor(dt3$SpecialStudyID))
summary(as.factor(dt3$GeneticID))
summary(as.factor(dt3$GeneticID2))
summary(as.factor(dt3$SexGeneID))
summary(as.factor(dt3$Ots28))
summary(as.factor(dt3$Lab))
summary(as.factor(dt3$GeneticTest))
summary(as.factor(dt3$GeneticModel))
detach(dt3)
######################
# merge the two time periods together
#colnames(dt2)==colnames(dt3)
dataset<-rbind(dt2,dt3)
# Add Water Year
dataset$WY <- year(dataset$SampleDate) +
as.numeric(between(month(dataset$SampleDate),10,12))
View(dataset)
View(dataset)
library(dplyr)
test<- left_join(dataset,DroughtYr, by="WY")
View(test)
View(test)
View(DroughtYr)
View(DroughtYr)
DroughtYr
str(DroughtYr)
test2<- merge(dataset,DroughtYr, by="WY")
View(test2)
View(test2)
View(dataset)
View(dataset)
View(WaterYr)
View(WaterYr)
test3 <- left_join(dataset,WaterYr, by="WY")
View(test3)
View(test3)
# merge the two time periods together
#colnames(dt2)==colnames(dt3)
dataset<-rbind(dt2,dt3)
View(dataset)
View(dataset)
colnames(dataset)
View(dataset)
View(dataset)
# remove all the unnecessary middle columns
dataset <- dataset[,c("Location","StationCode", "SampleDate",
"SampleTime", "MethodCode", "OrganismCode",
"IEPFishCode",         "CommonName",          "MarkCode",
"StageCode",           "Expression",          "ForkLength",
"RaceByLength",        "TagCode",             "RaceByTag",
"ArchivalID",          "SpecialStudyID",      "GeneticID",
"Probability1",        "GeneticID2",          "Probability2",
"SexGeneID",           "Ots28",               "Lab",
"GeneticTest",         "GeneticModel",        "Count" )]
test3 <- left_join(dataset,WaterYr, by="WY")
# Add Water Year
dataset$WY <- year(dataset$SampleDate) +
as.numeric(between(month(dataset$SampleDate),10,12))
test3 <- left_join(dataset,WaterYr, by="WY")
dataset<-rbind(dt2,dt3)
#remove(dt2,dt3)
# remove all the unnecessary middle columns
dataset <- dataset[,c("Location","StationCode", "SampleDate",
"SampleTime", "MethodCode", "OrganismCode",
"IEPFishCode",         "CommonName",          "MarkCode",
"StageCode",           "Expression",          "ForkLength",
"RaceByLength",        "TagCode",             "RaceByTag",
"ArchivalID",          "SpecialStudyID",      "GeneticID",
"Probability1",        "GeneticID2",          "Probability2",
"SexGeneID",           "Ots28",               "Lab",
"GeneticTest",         "GeneticModel",        "Count" )]
# Add Water Year
dataset$WY <- year(dataset$SampleDate) +
as.numeric(between(month(dataset$SampleDate),10,12))
# Add water year type & drought period year type
test2<-
left_join(dataset,DroughtYr, by="WY")
View(test2)
View(test2)
# Add water year type & drought period year type
dataset <- left_join(dataset,DroughtYr[,c(1:4)], by="WY")
View(dataset)
View(dataset)
# merge the two time periods together
#colnames(dt2)==colnames(dt3)
dataset<-rbind(dt2,dt3)
# Add Water Year
dataset$WY <- year(dataset$SampleDate) +
as.numeric(between(month(dataset$SampleDate),10,12))
# Add water year type & drought period year type
dataset <- left_join(dataset,DroughtYr[,c(1:4)], by="WY")
str(dataset)
# clip dataset to stations we want: Chipps Island and Sherwood Trawl
# and only trawl data
Trawl <- dataset[((dataset$Location %in% c("Chipps Island","Sherwood Harbor")))&
((dataset$MethodCode %in% c("KDTR","MWTR"))),]
# Species = combine CommonName + RaceByLength to get species/run
Trawl$Species <- as.character(Trawl$CommonName)
View(Trawl)
View(Trawl)
View(dataset)
View(dataset)
remove(test, test2, test3)
head(Trawl)
tail(Trawl)
################################################
# creating a dataframe of sample dates         #
# want a row for every species/run of interest #
# for every sample date                        #
################################################
Trawl_sampledates <-Trawl %>%
group_by(SampleDate) %>%
dplyr::summarize(
WY = WY,
Location = Location,
StationCode = StationCode,
SampleDate = SampleDate,
MethodCode = MethodCode,
)
#remove duplicate rows
Trawl_sampledates <- Trawl_sampledates[!duplicated(Trawl_sampledates),]
# need this whole df for every species
# add Species
Trawl_sampledates$Species <- character(length(Trawl_sampledates$SampleDate))
# want juvenile NMFS ESA/MSA species
species_list <- c("Fall-run Chinook salmon",
"NA-run Chinook salmon",
"Winter-run Chinook salmon",
"steelhead trout",
"LateFall-run Chinook salmon",
"Spring-run Chinook salmon")
# create dataframe with a row for each date for each species of interest
for (i in species_list){
samples <- Trawl_sampledates
samples$Species <- i
if(i==species_list[1]){ # if first in list, create data frame
interest_samples <- samples
} else { # if data frame exists, add to it
interest_samples <- rbind(interest_samples, samples)
}
}
remove(samples)
#add Count to samples dataframe
interest_samples$Count <- 0
#############################################
# combine data w/ dates/species of interest #
#############################################
# clip data to the same columns as my sample/date/species list
# clip to species of interest
Trawl_sums <- Trawl[(Trawl$Species %in% species_list),c(colnames(Trawl_sampledates),"Count")]
# combine the list of all sampledate rows of interest species
# with the list of actual data
Trawl_sums <- rbind(Trawl_sums,interest_samples) # *******
# create a date and species variable
Trawl_sums$DateSpecies <- paste(Trawl_sums$SampleDate,
Trawl_sums$Species)
# sum over species+date
Trawl_summary <- Trawl_sums %>%
group_by(DateSpecies) %>%
dplyr::summarize(
SampleDate = SampleDate,
WY = WY,
Location = Location,
StationCode = StationCode,
MethodCode = MethodCode,
Species = Species,
Catch_sum = sum(Count)
)
#remove duplicate rows
Trawl_summary <-Trawl_summary[!duplicated(Trawl_summary),]
################################
# Color Scheme to match others #
################################
# colors from Rosy/drought group
pal_drought <- c( "D" = "#FDE333", "N" = "#53CC67","W" = "#00588B")
pal_yrtype <- c( "Critical" = "#FDE333", "Dry" = "#53CC67", "Below Normal" = "#009B95","Above Normal" = "#00588B", "Wet" = "#4B0055")
pal_yrtype2 <- c( "C" = "#FDE333", "D" = "#53CC67", "BN" = "#009B95","AN" = "#00588B", "W" = "#4B0055")
# use theme_bw()
